<?xml version="1.0"?>
<launch>

  <arg name="laser_enabled" default="false"/>
  <arg name="kinect_enabled" default="false"/>
  <arg name="urdf_extras" default="$(find challenge_husky)/urdf/attachments.urdf.xacro"/>


    <arg name="world_name" default="$(find sphere_follower)/worlds/cimatec_world.world"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(arg world_name)"/> 
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>

  <include file="$(find challenge_husky)/launch/spawn_husky.launch">
    <arg name="laser_enabled" value="$(arg laser_enabled)"/>
    <arg name="kinect_enabled" value="$(arg kinect_enabled)"/>
    <arg name="urdf_extras" default="$(arg urdf_extras)"/>
    <arg name="x" default="45.0"/>
    <arg name="y" default="-2.0"/>
    <arg name="z" default="0.0"/>
    <arg name="yaw" default="3.1415"/>
  </include>



<node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
        <remap from="cloud_in" to="/velodyne_points"/>
        <rosparam>
            target_frame: velodyne # Leave disabled to output scan in pointcloud frame
            transform_tolerance: 0.01
            min_height: -0.4
            <!-- max_height: 2.0 -->
            angle_min: -1.0471 # -M_PI/2
            angle_max: 1.0471 # M_PI/2
            angle_increment: 0.0087 # M_PI/360.0
            scan_time: 0.3333
            range_min: 0.45
            range_max: 130.0
            use_inf: true
            inf_epsilon: 1.0
            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 0
        </rosparam>
    </node>

    <arg name="rviz" default="true" />
    <group if="$(arg rviz)">
        <node launch-prefix="nice" pkg="rviz" type="rviz" name="rviz" args="-d $(find challenge_husky)/rviz/config.rviz" />
    </group>

  <!-- - Run Move Base   -->
  <include file="$(find husky_navigation)/launch/move_base.launch">
    <arg name="no_static_map" value="true"/>
  </include>

  <!-- <node pkg="sphere_follower" name="opencv_camera" type="objectDetection.py" output="screen" /> -->
  <!-- <node pkg="quaternion_euler" name="quaternion_euler" type="quaternion_euler" />
  <node pkg="sphere_follower" name="opencv_camera" type="camera.py" output="screen" />
  <node pkg="sphere_follower" name="robot_vision" type="control_vision.py" output="screen" /> -->


	     <!-- - Run gmapping -->
<node pkg="gmapping" type="slam_gmapping" name="slam_gmapping">
	<!-- <rosparam file="$(find challenge_husky)/param/gmapping.yaml"/> -->
    <rosparam>
      odom_frame: odom
      base_frame: base_link
      map_frame: map

      map_update_interval: 0.5 # Publish new map

      maxUrange: 120 #20 # Should be just less than sensor range
      maxRange: 140 #50 # Should be just greater than sensor range
      particles: 100 # Increased from 80


      # Update frequencies
      linearUpdate: 0.3
      angularUpdate: 0.5
      temporalUpdate: 2.0
      resampleThreshold: 0.5

      # Initial Map Size
      xmin: -100.0
      ymin: -100.0
      xmax: 100.0
      ymax: 100.0
      delta: 0.05

      # All default
      sigma: 0.05
      kernelSize: 1
      lstep: 0.05
      astep: 0.05
      iterations: 5
      lsigma: 0.075
      ogain: 3.0
      lskip: 0
      llsamplerange: 0.01
      llsamplestep: 0.01
      lasamplerange: 0.005
      lasamplestep: 0.005

    </rosparam>
  </node>


 <rosparam file="$(find challenge_husky)/param/ros.yaml"/>

  <node name="Operator" pkg="nav2d_operator" type="operator" >
		<remap from="scan" to="scan"/>
		<rosparam file="$(find challenge_husky)/param/operator.yaml"/>
		<rosparam file="$(find challenge_husky)/param/costmap.yaml" ns="local_map" />
	</node> -->

  <node name="Navigator" pkg="nav2d_navigator" type="navigator">
		<rosparam file="$(find challenge_husky)/param/navigator.yaml"/>
	</node>

  <node name="GetMap" pkg="nav2d_navigator" type="get_map_client" />
  <node name="Explore" pkg="nav2d_navigator" type="explore_client" />
  <node name="SetGoal" pkg="nav2d_navigator" type="set_goal_client" /> 

</launch>
